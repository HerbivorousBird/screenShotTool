/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ml.liule.screenShotTool.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.JXDatePicker;
import org.json.JSONObject;

/**
 *
 * @author liu
 */
public class RecordsWindow extends javax.swing.JFrame {

    private DefaultTableModel tableModel = null;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yy年MM月dd日HH时mm分ss秒");
    private JXDatePicker startDate = null;
    private JXDatePicker endDate = null;

    class MyDate extends Date {

        public MyDate(Long time) {
            super(time);
        }

        @Override
        public String toString() {
            return dateFormat.format(this);
        }
    }

    /**
     * Creates new form RecordsWindow
     */
    public RecordsWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(MainWindow.icon);
        initToolPanel();
        initTable();
        try {
            readDateRangeRecords();
        } catch (SQLException ex) {
            Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolPanel = new javax.swing.JPanel();
        deleteChosen = new javax.swing.JButton();
        delete7 = new javax.swing.JButton();
        dateChoserPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("历史记录");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(0, 0));
        setPreferredSize(new java.awt.Dimension(600, 446));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        toolPanel.setBackground(new java.awt.Color(255, 255, 255));
        toolPanel.setLayout(new javax.swing.BoxLayout(toolPanel, javax.swing.BoxLayout.LINE_AXIS));

        deleteChosen.setText("删除选中");
        deleteChosen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteChosenMouseClicked(evt);
            }
        });
        toolPanel.add(deleteChosen);

        delete7.setText("删除7天前");
        delete7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delete7MouseClicked(evt);
            }
        });
        toolPanel.add(delete7);

        dateChoserPanel.setBackground(new java.awt.Color(255, 255, 255));
        toolPanel.add(dateChoserPanel);

        getContentPane().add(toolPanel);

        jScrollPane2.setOpaque(false);

        jTable.setBackground(new java.awt.Color(240, 240, 240));
        jTable.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "全选", "时间(点击可查看图片)", "OCR或二维码结果"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable.setColumnSelectionAllowed(true);
        jTable.setRowHeight(24);
        jTable.setSelectionForeground(new java.awt.Color(240, 240, 240));
        jTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable);
        jTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable.getColumnModel().getColumn(1).setResizable(false);
            jTable.getColumnModel().getColumn(1).setPreferredWidth(256);
            jTable.getColumnModel().getColumn(2).setResizable(false);
            jTable.getColumnModel().getColumn(2).setPreferredWidth(280);
        }

        getContentPane().add(jScrollPane2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void delete7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete7MouseClicked
        try {
            onDelete7Clicked();
        } catch (SQLException ex) {
            Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_delete7MouseClicked

    private void deleteChosenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteChosenMouseClicked
        onDeleteChosenClicked();
    }//GEN-LAST:event_deleteChosenMouseClicked

    private void initToolPanel() {
        startDate = new JXDatePicker(new Date(1577808000000l)); //2020年1月1日
        endDate = new JXDatePicker(new Date());
        SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd");
        startDate.setFormats(format);
        endDate.setFormats(format);
        startDate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    readDateRangeRecords();
                } catch (SQLException ex) {
                    Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        endDate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    readDateRangeRecords();
                } catch (SQLException ex) {
                    Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        dateChoserPanel.add(new JLabel("指定日期：从"));
        dateChoserPanel.add(startDate);
        dateChoserPanel.add(new JLabel("至"));
        dateChoserPanel.add(endDate);
    }

    private void initTable() {
        tableModel = (DefaultTableModel) jTable.getModel();
        jTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = jTable.rowAtPoint(e.getPoint());    //获得行位置 
                    int col = jTable.columnAtPoint(e.getPoint()); //获得列位置 
                    onGridDoubleClicked(row, col);
                } else {
                    return;
                }
            }
        });
        JTableHeader tableHeader = jTable.getTableHeader();
        tableHeader.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (tableHeader.columnAtPoint(e.getPoint()) == 0) {
                    onSelectSwitchClicked(tableHeader.getColumnModel().getColumn(0));
                }
            }
        });
    }

    private void onGridDoubleClicked(int row, int col) {
        if (col == 1) {
            try {
                MyDate date = (MyDate) tableModel.getValueAt(row, col);
                restoreScrShot(date.toString());
            } catch (IOException ex) {
                Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (col == 2) {
            String result = (String) (tableModel.getValueAt(row, col));
            new TextWindow(result);
        }
    }

    private void onSelectSwitchClicked(TableColumn selectSwitch) {
        int rowCount = tableModel.getRowCount();
        if (selectSwitch.getHeaderValue() == "全选") {
            selectSwitch.setHeaderValue("反选");
            for (int i = 0; i < rowCount; i++) {
                tableModel.setValueAt(true, i, 0);
            }
        } else {
            selectSwitch.setHeaderValue("全选");
            for (int i = 0; i < rowCount; i++) {
                tableModel.setValueAt(!(boolean) tableModel.getValueAt(i, 0), i, 0);
            }
        }
        jTable.updateUI();
    }

    private void clearTableModel() {
        int rowCount = tableModel.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }

    private void readDateRangeRecords() throws SQLException {
        clearTableModel();
        Long start = startDate.getDate().getTime();
        Long end = endDate.getDate().getTime() + 86399000;
        Statement statement = MainWindow.dbConnection.createStatement();
        String sqlString = "SELECT * FROM records "
                + "WHERE time BETWEEN %s AND %s "
                + "ORDER BY time DESC";
        try (ResultSet rSet = statement.executeQuery(String.format(sqlString, start, end))) {
            while (rSet.next()) {
                Object[] rowData = new Object[]{false, new MyDate(rSet.getLong("time")), rSet.getString("result")};
                tableModel.addRow(rowData);
            }
            rSet.close();//关闭数据集
            statement.close();
        }
    }

    private void deleteByDate(MyDate date) throws SQLException {
        String path = MainWindow.recordsPath + "\\file\\" + date;
        Statement statement = MainWindow.dbConnection.createStatement();
        String sqlString = "DELETE FROM records WHERE time= %s";
        statement.execute(String.format(sqlString, date.getTime()));
        statement.close();
        File pic = new File(path + ".jpg");
        File json = new File(path + ".json");
        if (pic.exists()) {
            pic.delete();
        }
        if (json.exists()) {
            json.delete();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dateChoserPanel;
    private javax.swing.JButton delete7;
    private javax.swing.JButton deleteChosen;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JPanel toolPanel;
    // End of variables declaration//GEN-END:variables

    private void restoreScrShot(String dateString) throws IOException {
        String path = MainWindow.recordsPath + "\\file\\";
        File jsonFile = new File(path + dateString + ".json");
        File imageFile = new File(path + dateString + ".jpg");
        if (jsonFile.exists() && imageFile.exists()) {
        } else {
            return;
        }
        InputStreamReader isr = new InputStreamReader(new FileInputStream(jsonFile), "UTF-8");
        BufferedReader reader = new BufferedReader(isr);
        StringBuilder builder = new StringBuilder();
        String line = null;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        String content = builder.toString();
        JSONObject json = new JSONObject(content);
        try {
            BufferedImage image = ImageIO.read(imageFile);
            new ScrShotWindow(json, image);
        } catch (IIOException e) {
            System.err.println("读取记录图片时出错");
        }
        isr.close();
    }

    private void onDelete7Clicked() throws SQLException {
        Long sevenDayAgo = startDate.getDate().getTime() - 86399000 * 7;
        Statement statement = MainWindow.dbConnection.createStatement();
        String sqlString = "select time from records where time < %s";
        ResultSet rSet = statement.executeQuery(String.format(sqlString, sevenDayAgo));
        while (rSet.next()) {
            Long time = rSet.getLong(0);
            deleteByDate(new MyDate(time));
        }
        rSet.close();//关闭数据集
        statement.close();
    }

    private void onDeleteChosenClicked() {
        int rowCount = tableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            if ((boolean) tableModel.getValueAt(i, 0))
            try {
                deleteByDate((MyDate) tableModel.getValueAt(i, 1));
            } catch (SQLException ex) {
                Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            readDateRangeRecords();
        } catch (SQLException ex) {
            Logger.getLogger(RecordsWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
