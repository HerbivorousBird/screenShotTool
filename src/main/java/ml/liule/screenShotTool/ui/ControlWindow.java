/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ml.liule.screenShotTool.ui;

import com.baidu.aip.ocr.AipOcr;
import com.google.zxing.Binarizer;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.ChecksumException;
import com.google.zxing.DecodeHintType;
import com.google.zxing.FormatException;
import com.google.zxing.LuminanceSource;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.QRCodeReader;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.AbstractButton;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import ml.liule.screenShotTool.graelement.GraElement;
import ml.liule.screenShotTool.graelement.MyPolyline;
import ml.liule.screenShotTool.graelement.MyRectangle;
import ml.liule.screenShotTool.graelement.MyStringGra;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author liu
 */
public class ControlWindow extends javax.swing.JFrame {

    private ScrShotWindow scrShot = null;

    private final ArrayList<GraElement> graElements = new ArrayList<>();
    public GraElement tempGra = null;
    private int cursor = 0;
    private BufferedImage shotImage = null; //截取的全屏图
    private BufferedImage darkerImage = null;  //变暗后的图
    private BufferedImage tempImage = null;  //缓冲变化的临时图片
    private BufferedImage lighterImage = null;  //截取区域的图

    protected ChosenRectangle chosenRec = null;  //截图选择的矩形区域
    private BufferedImage saveImage = null;  //最终存储的图片
    private String resultString;            //二维码扫描结果
    private final long time;                   //存储时间戳

    public ControlWindow(ScrShotWindow scrShot, BufferedImage shotImage) {
        this.shotImage = shotImage;
        time = new Date().getTime();
        resultString = "未进行OCR或QRScan";
        RescaleOp ro = new RescaleOp(0.7f, 0, null);
        darkerImage = ro.filter(shotImage, null);
        this.scrShot = scrShot;
        this.setUndecorated(true);
        initComponents();
        initColorChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorGroup = new javax.swing.ButtonGroup();
        statusGroup = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        recButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        drawButton = new javax.swing.JButton();
        adjustButton = new javax.swing.JButton();
        toQRButton = new javax.swing.JButton();
        toOCRButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        toFileButton = new javax.swing.JButton();
        toClipButton = new javax.swing.JButton();
        colorAndTextPanel = new javax.swing.JPanel();
        colorPanel = new javax.swing.JPanel();
        yellowButton = new javax.swing.JRadioButton();
        magentaButton = new javax.swing.JRadioButton();
        redButton = new javax.swing.JRadioButton();
        greyButton = new javax.swing.JRadioButton();
        greenButton = new javax.swing.JRadioButton();
        blackButton = new javax.swing.JRadioButton();
        blueButton = new javax.swing.JRadioButton();
        whiteButton = new javax.swing.JRadioButton();
        orangeButton = new javax.swing.JRadioButton();
        pinkButton = new javax.swing.JRadioButton();
        textBar = new javax.swing.JToolBar();
        textField = new javax.swing.JTextField();
        textButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new java.awt.GridLayout(2, 0));

        jToolBar1.setBackground(java.awt.Color.white);
        jToolBar1.setRollover(true);

        undoButton.setBackground(java.awt.Color.white);
        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/undo.png"))); // NOI18N
        undoButton.setEnabled(false);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(undoButton);

        redoButton.setBackground(java.awt.Color.white);
        redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/redo.png"))); // NOI18N
        redoButton.setEnabled(false);
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(redoButton);

        recButton.setBackground(java.awt.Color.white);
        recButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/rec.png"))); // NOI18N
        statusGroup.add(recButton);
        recButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(recButton);

        lineButton.setBackground(java.awt.Color.white);
        lineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/line.png"))); // NOI18N
        statusGroup.add(lineButton);
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(lineButton);

        drawButton.setBackground(java.awt.Color.white);
        drawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/pen.png"))); // NOI18N
        statusGroup.add(drawButton);
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(drawButton);

        adjustButton.setBackground(java.awt.Color.white);
        adjustButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/adjust.png"))); // NOI18N
        statusGroup.add(adjustButton);
        adjustButton.setFocusable(false);
        adjustButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        adjustButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        adjustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(adjustButton);

        toQRButton.setBackground(java.awt.Color.white);
        toQRButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/qr.png"))); // NOI18N
        toQRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toQRButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(toQRButton);

        toOCRButton.setBackground(java.awt.Color.white);
        toOCRButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/ocr.png"))); // NOI18N
        toOCRButton.setToolTipText("");
        toOCRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toOCRButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(toOCRButton);

        exitButton.setBackground(java.awt.Color.white);
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/exit.png"))); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exitButton);

        toFileButton.setBackground(java.awt.Color.white);
        toFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/save.png"))); // NOI18N
        toFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toFileButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(toFileButton);

        toClipButton.setBackground(java.awt.Color.white);
        toClipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/copy.png"))); // NOI18N
        toClipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toClipButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(toClipButton);

        getContentPane().add(jToolBar1);

        colorAndTextPanel.setLayout(new javax.swing.BoxLayout(colorAndTextPanel, javax.swing.BoxLayout.LINE_AXIS));

        colorPanel.setLayout(new java.awt.GridLayout(2, 0));

        yellowButton.setBackground(java.awt.Color.yellow);
        colorGroup.add(yellowButton);
        colorPanel.add(yellowButton);

        magentaButton.setBackground(java.awt.Color.magenta);
        colorGroup.add(magentaButton);
        colorPanel.add(magentaButton);

        redButton.setBackground(java.awt.Color.red);
        colorGroup.add(redButton);
        colorPanel.add(redButton);

        greyButton.setBackground(java.awt.Color.gray);
        colorGroup.add(greyButton);
        colorPanel.add(greyButton);

        greenButton.setBackground(java.awt.Color.green);
        colorGroup.add(greenButton);
        colorPanel.add(greenButton);

        blackButton.setBackground(new java.awt.Color(0, 0, 0));
        colorGroup.add(blackButton);
        blackButton.setSelected(true);
        colorPanel.add(blackButton);

        blueButton.setBackground(java.awt.Color.blue);
        colorGroup.add(blueButton);
        colorPanel.add(blueButton);

        whiteButton.setBackground(new java.awt.Color(255, 255, 255));
        colorGroup.add(whiteButton);
        colorPanel.add(whiteButton);

        orangeButton.setBackground(java.awt.Color.orange);
        colorGroup.add(orangeButton);
        colorPanel.add(orangeButton);

        pinkButton.setBackground(java.awt.Color.pink);
        colorGroup.add(pinkButton);
        colorPanel.add(pinkButton);

        colorAndTextPanel.add(colorPanel);

        textBar.setRollover(true);

        textField.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        textField.setToolTipText("在此输入要添加的文字");
        textBar.add(textField);

        textButton.setBackground(new java.awt.Color(255, 255, 255));
        textButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ml/liule/screenShotTool/res/text.png"))); // NOI18N
        statusGroup.add(textButton);
        textButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textButtonActionPerformed(evt);
            }
        });
        textBar.add(textButton);

        colorAndTextPanel.add(textBar);

        getContentPane().add(colorAndTextPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        undo();
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        redo();
    }//GEN-LAST:event_redoButtonActionPerformed

    private void recButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recButtonActionPerformed
        scrShot.setCurOptions(ScrShotWindow.REC);
    }//GEN-LAST:event_recButtonActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        scrShot.setCurOptions(ScrShotWindow.LINE);
    }//GEN-LAST:event_lineButtonActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        scrShot.setCurOptions(ScrShotWindow.DRAW);
    }//GEN-LAST:event_drawButtonActionPerformed

    private void adjustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustButtonActionPerformed
        scrShot.setCurOptions(ScrShotWindow.SELECTED);
    }//GEN-LAST:event_adjustButtonActionPerformed

    private void textButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textButtonActionPerformed
        onTextButtonClicked();
    }//GEN-LAST:event_textButtonActionPerformed

    private void toQRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toQRButtonActionPerformed
        onQRScanClicked();
    }//GEN-LAST:event_toQRButtonActionPerformed

    private void toOCRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toOCRButtonActionPerformed
        onOCRClicked();
    }//GEN-LAST:event_toOCRButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        onExitClicked();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void toFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toFileButtonActionPerformed
        onSaveClicked();
    }//GEN-LAST:event_toFileButtonActionPerformed

    private void toClipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toClipButtonActionPerformed
        onClipClicked();
    }//GEN-LAST:event_toClipButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adjustButton;
    private javax.swing.JRadioButton blackButton;
    private javax.swing.JRadioButton blueButton;
    private javax.swing.JPanel colorAndTextPanel;
    private javax.swing.ButtonGroup colorGroup;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JButton drawButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton greenButton;
    private javax.swing.JRadioButton greyButton;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton lineButton;
    private javax.swing.JRadioButton magentaButton;
    private javax.swing.JRadioButton orangeButton;
    private javax.swing.JRadioButton pinkButton;
    private javax.swing.JButton recButton;
    private javax.swing.JRadioButton redButton;
    private javax.swing.JButton redoButton;
    private javax.swing.ButtonGroup statusGroup;
    private javax.swing.JToolBar textBar;
    private javax.swing.JButton textButton;
    private javax.swing.JTextField textField;
    private javax.swing.JButton toClipButton;
    private javax.swing.JButton toFileButton;
    private javax.swing.JButton toOCRButton;
    private javax.swing.JButton toQRButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JRadioButton whiteButton;
    private javax.swing.JRadioButton yellowButton;
    // End of variables declaration//GEN-END:variables

    public void resetLocation() { //传入x，y为右上角坐标
        int x = chosenRec.x + chosenRec.width;
        int y = chosenRec.y + chosenRec.height;
        if (x - getWidth() < 0) {
            x = getWidth();
        }
        if (y + getHeight() > scrShot.getHeight()) {
            y = scrShot.getHeight() - getHeight();
        }
        setLocation(x - getWidth(), y);
    }

    public void refreshButtonState() {
        undoButton.setEnabled(undoAble());
        redoButton.setEnabled(redoAble());
    }

    public void highLightOptions() {
        switch (scrShot.getCurOptions()) {
            case ScrShotWindow.LINE:
                lineButton.setBackground(Color.GRAY);
                drawButton.setBackground(Color.WHITE);
                textButton.setBackground(Color.WHITE);
                recButton.setBackground(Color.WHITE);
                adjustButton.setBackground(Color.WHITE);
                break;
            case ScrShotWindow.DRAW:
                drawButton.setBackground(Color.GRAY);
                lineButton.setBackground(Color.WHITE);
                textButton.setBackground(Color.WHITE);
                recButton.setBackground(Color.WHITE);
                adjustButton.setBackground(Color.WHITE);
                break;
            case ScrShotWindow.CHAR:
                textButton.setBackground(Color.GRAY);
                lineButton.setBackground(Color.WHITE);
                drawButton.setBackground(Color.WHITE);
                recButton.setBackground(Color.WHITE);
                adjustButton.setBackground(Color.WHITE);
                break;
            case ScrShotWindow.REC:
                recButton.setBackground(Color.GRAY);
                lineButton.setBackground(Color.WHITE);
                drawButton.setBackground(Color.WHITE);
                textButton.setBackground(Color.WHITE);
                adjustButton.setBackground(Color.WHITE);
                break;
            case ScrShotWindow.SELECTED:
                recButton.setBackground(Color.WHITE);
                lineButton.setBackground(Color.WHITE);
                drawButton.setBackground(Color.WHITE);
                textButton.setBackground(Color.WHITE);
                adjustButton.setBackground(Color.GRAY);
                break;
        }
    }

    private void initColorChooser() {
        Enumeration<AbstractButton> colorElements = colorGroup.getElements();
        while (colorElements.hasMoreElements()) {
            AbstractButton colorButton = colorElements.nextElement();
            colorButton.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    scrShot.setCurColor(colorButton.getBackground());
                }
            });
        }
    }

    private void onOCRClicked() {
        TextWindow textWindow = new TextWindow();
        Thread t = new Thread(() -> {
            String result = toOCR();
            textWindow.setText(result);
        });
        t.start();
    }

    private void onTextButtonClicked() {
        if (!textField.getText().trim().isEmpty()) {
            scrShot.setCurOptions(ScrShotWindow.CHAR);
            scrShot.setCurString(textField.getText());
        } else {
            scrShot.setCurOptions(ScrShotWindow.SELECTED);
        }
    }

    private void onClipClicked() {
        scrShot.setVisible(false);
        this.setVisible(false);
        saveImageClipboard();
        if (scrShot.getIsSaveToDB()) {
            try {
                saveToDB();
            } catch (IOException ex) {
                Logger.getLogger(ControlWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        scrShot.dispose();
        this.dispose();
    }

    private void onQRScanClicked() {
        String result = toQRScan();
        new TextWindow(result);
    }

    private void onExitClicked() {
        scrShot.setVisible(false);
        this.setVisible(false);
        if (scrShot.getIsSaveToDB()) {
            try {
                saveToDB();
            } catch (IOException ex) {
                Logger.getLogger(ControlWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        scrShot.dispose();
        this.dispose();
    }

    private void onSaveClicked() {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("jpg文件", "jpg");
        chooser.setFileFilter(filter);
        SimpleDateFormat dateFormat = new SimpleDateFormat("yy年MM月dd日HH时mm分ss秒");
        String fileName = dateFormat.format(time);  //把时间作为图片名（防止图片名重复，而把之前的图片覆盖）
        File filePath = FileSystemView.getFileSystemView().getHomeDirectory();  //获取系统桌面的路径
        File defaultFile = new File(filePath + File.separator + fileName + ".jpg");
        chooser.setSelectedFile(defaultFile);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                scrShot.setVisible(false);
                this.setVisible(false);
                saveImage(chooser.getSelectedFile().getPath());
                if (scrShot.getIsSaveToDB()) {
                    saveToDB();
                }
            } catch (IOException ex) {
                Logger.getLogger(ControlWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            scrShot.dispose();
            this.dispose();
        }
    }

    private void createTemp() {
        tempImage = new BufferedImage(darkerImage.getWidth(), darkerImage.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        Graphics g = tempImage.getGraphics();
        g.drawImage(darkerImage, 0, 0, null);

        int x = chosenRec.x;
        int y = chosenRec.y;
        int width = chosenRec.width;
        int height = chosenRec.height;

        g.setColor(Color.BLUE);
        g.drawRect(x - 1, y - 1, width + 2, height + 2);
        g.drawRect(x - 2, y - 2, width + 4, height + 4);

        lighterImage = shotImage.getSubimage(x, y, width, height);
        g.drawImage(lighterImage, x, y, null);
    }

    public void drawBackground() {
        if (chosenRec == null) {
            getGraphics().drawImage(darkerImage, 0, 0, null);
            return;
        }
        createTemp();
        getGraphics().drawImage(tempImage, 0, 0, null);
    }

    public void addTempGra() {
        if (tempGra != null) {
            graElements.add(cursor, tempGra);
            cursor++;
            tempGra = null;
        }
        if (redoAble()) {
            for (int i = cursor; i < graElements.size(); i++) {
                graElements.remove(i);
            }
        }
    }

    public boolean undoAble() {
        return cursor != 0;
    }

    public void undo() {
        if (undoAble()) {
            cursor--;
        }
        refreshButtonState();
        draw();
    }

    public boolean redoAble() {
        return cursor < graElements.size();
    }

    public void redo() {
        if (redoAble()) {
            cursor++;
        }
        refreshButtonState();
        draw();
    }

    public JSONObject toJson() {
        JSONObject control = new JSONObject();
        control.put("ChosenRec", chosenRec);
        JSONArray graArr = new JSONArray();
        for (int i = 0; i < graElements.size(); i++) {
            GraElement gra = graElements.get(i);
            graArr.put(gra.toJson());
        }
        control.put("Gras", graArr);
        return control;
    }

    public void fromJson(JSONObject control) {
        chosenRec = new ChosenRectangle();
        chosenRec.fromString(control.getString("ChosenRec"));
        JSONArray graArr = control.getJSONArray("Gras");
        for (int i = 0; i < graArr.length(); i++) {
            JSONObject graJson = graArr.getJSONObject(i);
            int type = graJson.getInt("Type");
            switch (type) {
                case GraElement.STR:
                    tempGra = new MyStringGra(graJson);
                    addTempGra();
                    break;
                case GraElement.LINE:
                    tempGra = new MyPolyline(graJson);
                    addTempGra();
                    break;
                case GraElement.RECT:
                    tempGra = new MyRectangle(graJson);
                    addTempGra();
                    break;
            }
        }
    }

    public void draw() {
        if (chosenRec == null) {
            scrShot.getGraphics().drawImage(darkerImage, 0, 0, null);
            return;
        }
        createTemp();
        Graphics2D g2d = (Graphics2D) tempImage.getGraphics();
        for (int i = 0; i < cursor; i++) {
            graElements.get(i).draw(g2d);
        }
        if (tempGra != null) {
            tempGra.draw(g2d);
        }
        scrShot.getGraphics().drawImage(tempImage, 0, 0, null);
    }

    private void drawSaveImage() {
        draw();
        int x = chosenRec.x;
        int y = chosenRec.y;
        int width = chosenRec.width;
        int height = chosenRec.height;
        saveImage = tempImage.getSubimage(x, y, width, height);
    }

    public void saveImageClipboard() {
        drawSaveImage();
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new Transferable() {

            @Override
            public DataFlavor[] getTransferDataFlavors() {
                return new DataFlavor[]{DataFlavor.imageFlavor};
            }

            @Override
            public boolean isDataFlavorSupported(DataFlavor flavor) {
                return DataFlavor.imageFlavor.equals(flavor);
            }

            @Override
            public Object getTransferData(DataFlavor flavor)
                    throws UnsupportedFlavorException, IOException {
                if (!DataFlavor.imageFlavor.equals(flavor)) {
                    throw new UnsupportedFlavorException(flavor);
                }
                return saveImage;
            }
        }, null);
    }

    public void saveImage(String path) throws IOException {
        drawSaveImage();
        if (!(path.endsWith(".jpg") || path.endsWith(".JPG"))) {
            path += ".jpg";
        }
        ImageIO.write(saveImage, "jpg", new File(path));
    }

    public String toOCR() {
        HashMap<String, String> options = new HashMap<>();
        options.put("language_type", "CHN_ENG");
        String appId = "20222761";
        String apiKey = "uLRTAip8RqvGNTTykovfr8Og";
        String secretKey = "Qm71QdQMLkKjzcafZr2Gy3KxFlCVUUfN";
        AipOcr client = new AipOcr(appId, apiKey, secretKey);
        try {
            JSONObject res = client.basicGeneral(image2byte(lighterImage), options);
            int count = res.getInt("words_result_num");
            if (count == 0) {
                resultString = "没有发现文字！";
            }
            JSONArray stringsJson = res.getJSONArray("words_result");
            StringJoiner sj = new StringJoiner("\n");
            for (int i = 0; i < stringsJson.length(); i++) {
                sj.add(((JSONObject) stringsJson.get(i)).getString("words"));
            }
            resultString = sj.toString();
        } catch (UnknownHostException e) {
            resultString = "网络错误！";
        } catch (IOException | JSONException e) {
            resultString = "未知错误！";
        }
        return resultString;
    }

    public String toQRScan() {
        drawSaveImage();
        LuminanceSource source = new BufferedImageLuminanceSource(saveImage);
        Binarizer binarizer = new HybridBinarizer(source);
        BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer);
        Map<DecodeHintType, Object> hints = new HashMap<>();
        hints.put(DecodeHintType.CHARACTER_SET, "utf-8");
        hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
        try {
            Result result = new QRCodeReader().decode(binaryBitmap, hints); //解码
            resultString = result.getText();
        } catch (NotFoundException ex) {
            resultString = "未发现二维码";
        } catch (ChecksumException | FormatException ex) {
            resultString = "出错:" + ex.getMessage();
        }
        return resultString;
    }

    public void saveToDB() throws IOException {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yy年MM月dd日HH时mm分ss秒");
        String path = MainWindow.recordsPath + "/file/";
        String dateStr = dateFormat.format(new Date(time));
        try {
            Statement statement = MainWindow.dbConnection.createStatement();
            String insertSql = "insert into records(time,result) values(%s,'%s')";
            statement.execute(String.format(insertSql, time, resultString));
        } catch (SQLException ex) {
            Logger.getLogger(ControlWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedWriter writer = new BufferedWriter(new FileWriter(path + dateStr + ".json"));
        writer.write(toJson().toString(2));
        ImageIO.write(shotImage, "jpg", new File(path + dateStr + ".jpg"));
        writer.close();
    }

    private byte[] image2byte(BufferedImage image) throws IOException {
        ByteArrayOutputStream bs = new ByteArrayOutputStream();
        ImageOutputStream imOut;
        imOut = ImageIO.createImageOutputStream(bs);
        ImageIO.write(image, "jpg", imOut);
        return bs.toByteArray();
    }
}
